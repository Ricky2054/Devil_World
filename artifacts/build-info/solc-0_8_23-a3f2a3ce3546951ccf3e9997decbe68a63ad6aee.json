{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_23-a3f2a3ce3546951ccf3e9997decbe68a63ad6aee",
  "solcVersion": "0.8.23",
  "solcLongVersion": "0.8.23+commit.f704f362",
  "userSourceNameMap": {
    "contracts/AVAXStaking.sol": "project/contracts/AVAXStaking.sol",
    "contracts/CryptoIslandNFT.sol": "project/contracts/CryptoIslandNFT.sol",
    "contracts/CryptoIslandToken.sol": "project/contracts/CryptoIslandToken.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Pausable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/AVAXStaking.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title AVAX Staking Contract\r\n * @dev Allows users to stake 0.001 AVAX and earn rewards\r\n * @author Crypto Island Adventure Game\r\n */\r\ncontract AVAXStaking {\r\n    // Events\r\n    event Staked(address indexed user, uint256 amount, uint256 timestamp);\r\n    event Unstaked(address indexed user, uint256 amount, uint256 timestamp);\r\n    event RewardsClaimed(address indexed user, uint256 amount, uint256 timestamp);\r\n    event EmergencyWithdraw(address indexed owner, uint256 amount, uint256 timestamp);\r\n\r\n    // Structs\r\n    struct Staker {\r\n        uint256 stakedAmount;\r\n        uint256 stakingTimestamp;\r\n        uint256 lastRewardClaim;\r\n        bool isStaking;\r\n    }\r\n\r\n    // State variables\r\n    mapping(address => Staker) public stakers;\r\n    address public owner;\r\n    uint256 public constant MINIMUM_STAKE = 0.001 ether; // 0.001 AVAX\r\n    uint256 public constant REWARD_RATE = 10; // 10% APY (per year)\r\n    uint256 public constant REWARD_PRECISION = 10000; // For percentage calculations\r\n    uint256 public totalStaked;\r\n    uint256 public totalRewardsPaid;\r\n    bool public stakingPaused = false;\r\n\r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!stakingPaused, \"Staking is currently paused\");\r\n        _;\r\n    }\r\n\r\n    modifier validStake() {\r\n        require(msg.value >= MINIMUM_STAKE, \"Minimum stake is 0.001 AVAX\");\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Stake AVAX tokens\r\n     * @notice Users can stake minimum 0.001 AVAX\r\n     */\r\n    function stake() external payable whenNotPaused validStake {\r\n        require(!stakers[msg.sender].isStaking, \"Already staking\");\r\n\r\n        // Create staker record\r\n        stakers[msg.sender] = Staker({\r\n            stakedAmount: msg.value,\r\n            stakingTimestamp: block.timestamp,\r\n            lastRewardClaim: block.timestamp,\r\n            isStaking: true\r\n        });\r\n\r\n        totalStaked += msg.value;\r\n\r\n        emit Staked(msg.sender, msg.value, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Unstake AVAX tokens\r\n     * @notice Users can unstake their tokens after staking\r\n     */\r\n    function unstake() external {\r\n        require(stakers[msg.sender].isStaking, \"Not staking\");\r\n\r\n        Staker storage staker = stakers[msg.sender];\r\n        uint256 stakedAmount = staker.stakedAmount;\r\n        uint256 rewards = calculateRewards(msg.sender);\r\n\r\n        // Reset staker\r\n        delete stakers[msg.sender];\r\n        totalStaked -= stakedAmount;\r\n\r\n        // Transfer staked amount + rewards\r\n        uint256 totalToTransfer = stakedAmount + rewards;\r\n        totalRewardsPaid += rewards;\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: totalToTransfer}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit Unstaked(msg.sender, stakedAmount, block.timestamp);\r\n        if (rewards > 0) {\r\n            emit RewardsClaimed(msg.sender, rewards, block.timestamp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Claim rewards without unstaking\r\n     * @notice Users can claim accumulated rewards\r\n     */\r\n    function claimRewards() external {\r\n        require(stakers[msg.sender].isStaking, \"Not staking\");\r\n\r\n        uint256 rewards = calculateRewards(msg.sender);\r\n        require(rewards > 0, \"No rewards to claim\");\r\n\r\n        // Update last reward claim time\r\n        stakers[msg.sender].lastRewardClaim = block.timestamp;\r\n        totalRewardsPaid += rewards;\r\n\r\n        (bool success, ) = payable(msg.sender).call{value: rewards}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit RewardsClaimed(msg.sender, rewards, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate pending rewards for a staker\r\n     * @param stakerAddress Address of the staker\r\n     * @return rewards Pending rewards amount\r\n     */\r\n    function calculateRewards(address stakerAddress) public view returns (uint256) {\r\n        if (!stakers[stakerAddress].isStaking) {\r\n            return 0;\r\n        }\r\n\r\n        Staker memory staker = stakers[stakerAddress];\r\n        uint256 stakingDuration = block.timestamp - staker.lastRewardClaim;\r\n        uint256 stakedAmount = staker.stakedAmount;\r\n\r\n        // Calculate rewards: (stakedAmount * REWARD_RATE * stakingDuration) / (365 days * REWARD_PRECISION)\r\n        uint256 rewards = (stakedAmount * REWARD_RATE * stakingDuration) / \r\n                         (365 days * REWARD_PRECISION);\r\n\r\n        return rewards;\r\n    }\r\n\r\n    /**\r\n     * @dev Get staker information\r\n     * @param stakerAddress Address of the staker\r\n     * @return stakedAmount Amount staked\r\n     * @return stakingTimestamp When staking started\r\n     * @return pendingRewards Current pending rewards\r\n     * @return isStaking Whether currently staking\r\n     */\r\n    function getStakerInfo(address stakerAddress) external view returns (\r\n        uint256 stakedAmount,\r\n        uint256 stakingTimestamp,\r\n        uint256 pendingRewards,\r\n        bool isStaking\r\n    ) {\r\n        Staker memory staker = stakers[stakerAddress];\r\n        return (\r\n            staker.stakedAmount,\r\n            staker.stakingTimestamp,\r\n            calculateRewards(stakerAddress),\r\n            staker.isStaking\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Get contract statistics\r\n     * @return totalStaked Total amount staked in contract\r\n     * @return totalRewardsPaid Total rewards paid out\r\n     * @return contractBalance Current contract balance\r\n     */\r\n    function getContractStats() external view returns (\r\n        uint256 totalStaked,\r\n        uint256 totalRewardsPaid,\r\n        uint256 contractBalance\r\n    ) {\r\n        return (\r\n            totalStaked,\r\n            totalRewardsPaid,\r\n            address(this).balance\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Pause staking (only owner)\r\n     */\r\n    function pauseStaking() external onlyOwner {\r\n        stakingPaused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause staking (only owner)\r\n     */\r\n    function unpauseStaking() external onlyOwner {\r\n        stakingPaused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw (only owner)\r\n     * @notice Only for emergency situations\r\n     */\r\n    function emergencyWithdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n\r\n        (bool success, ) = payable(owner).call{value: balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n\r\n        emit EmergencyWithdraw(owner, balance, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Add funds to contract for rewards (only owner)\r\n     * @notice Owner can add AVAX to fund rewards\r\n     */\r\n    function fundRewards() external payable onlyOwner {\r\n        require(msg.value > 0, \"Must send AVAX to fund rewards\");\r\n        // Funds are automatically added to contract balance\r\n    }\r\n\r\n    /**\r\n     * @dev Receive function to accept AVAX\r\n     */\r\n    receive() external payable {\r\n        // Contract can receive AVAX\r\n    }\r\n\r\n    /**\r\n     * @dev Fallback function\r\n     */\r\n    fallback() external payable {\r\n        // Fallback function\r\n    }\r\n}\r\n"
      },
      "project/contracts/CryptoIslandNFT.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n/**\r\n * @title Crypto Island NFT Collection\r\n * @dev Simple NFT contract for Crypto Island Adventure Game\r\n * @author Crypto Island Adventure Game\r\n */\r\ncontract CryptoIslandNFT {\r\n    // Events\r\n    event NFTMinted(address indexed to, uint256 tokenId, uint256 timestamp);\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    \r\n    // State variables\r\n    mapping(uint256 => address) private _owners;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n    \r\n    string private _name = \"Crypto Island Adventure\";\r\n    string private _symbol = \"CIA\";\r\n    string private _baseTokenURI = \"https://crypto-island-adventure.com/metadata/\";\r\n    \r\n    uint256 private _tokenIdCounter;\r\n    uint256 public constant MINT_PRICE = 0.0005 ether; // 0.0005 AVAX\r\n    uint256 public constant MAX_SUPPLY = 10000;\r\n    bool public mintingPaused = false;\r\n    address public owner;\r\n    \r\n    // NFT metadata\r\n    struct NFTMetadata {\r\n        string name;\r\n        string description;\r\n        string image;\r\n        string[] attributes;\r\n    }\r\n    \r\n    mapping(uint256 => NFTMetadata) public tokenMetadata;\r\n    \r\n    // Modifiers\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n    \r\n    modifier whenNotPaused() {\r\n        require(!mintingPaused, \"Minting is currently paused\");\r\n        _;\r\n    }\r\n    \r\n    modifier validMint() {\r\n        require(msg.value >= MINT_PRICE, \"Insufficient payment for minting\");\r\n        require(_tokenIdCounter < MAX_SUPPLY, \"Max supply reached\");\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    // Mint NFT\r\n    function mintNFT() external payable whenNotPaused validMint {\r\n        uint256 tokenId = _tokenIdCounter;\r\n        _tokenIdCounter++;\r\n        \r\n        _mint(msg.sender, tokenId);\r\n        \r\n        // Set metadata\r\n        tokenMetadata[tokenId] = NFTMetadata({\r\n            name: string(abi.encodePacked(\"Crypto Island NFT #\", _toString(tokenId))),\r\n            description: \"A unique NFT from the Crypto Island Adventure game. This NFT represents your journey in the digital revolution.\",\r\n            image: string(abi.encodePacked(_baseTokenURI, _toString(tokenId), \".png\")),\r\n            attributes: _generateAttributes(tokenId)\r\n        });\r\n        \r\n        emit NFTMinted(msg.sender, tokenId, block.timestamp);\r\n    }\r\n    \r\n    // Mint NFT to specific address (only owner)\r\n    function mintTo(address to) external onlyOwner {\r\n        require(_tokenIdCounter < MAX_SUPPLY, \"Max supply reached\");\r\n        \r\n        uint256 tokenId = _tokenIdCounter;\r\n        _tokenIdCounter++;\r\n        \r\n        _mint(to, tokenId);\r\n        \r\n        // Set metadata\r\n        tokenMetadata[tokenId] = NFTMetadata({\r\n            name: string(abi.encodePacked(\"Crypto Island NFT #\", _toString(tokenId))),\r\n            description: \"A unique NFT from the Crypto Island Adventure game. This NFT represents your journey in the digital revolution.\",\r\n            image: string(abi.encodePacked(_baseTokenURI, _toString(tokenId), \".png\")),\r\n            attributes: _generateAttributes(tokenId)\r\n        });\r\n        \r\n        emit NFTMinted(to, tokenId, block.timestamp);\r\n    }\r\n    \r\n    // Get total supply\r\n    function totalSupply() external view returns (uint256) {\r\n        return _tokenIdCounter;\r\n    }\r\n    \r\n    // Get balance\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    // Get owner of token\r\n    function ownerOf(uint256 tokenId) external view returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n    \r\n    // Get token URI\r\n    function tokenURI(uint256 tokenId) external view returns (string memory) {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n        return string(abi.encodePacked(_baseTokenURI, _toString(tokenId), \".json\"));\r\n    }\r\n    \r\n    // Get NFT metadata\r\n    function getNFTMetadata(uint256 tokenId) external view returns (NFTMetadata memory) {\r\n        require(_exists(tokenId), \"Token does not exist\");\r\n        return tokenMetadata[tokenId];\r\n    }\r\n    \r\n    // Get max supply\r\n    function getMaxSupply() external pure returns (uint256) {\r\n        return MAX_SUPPLY;\r\n    }\r\n    \r\n    // Get mint price\r\n    function getMintPrice() external pure returns (uint256) {\r\n        return MINT_PRICE;\r\n    }\r\n    \r\n    // Set base URI (only owner)\r\n    function setBaseURI(string memory newBaseURI) external onlyOwner {\r\n        _baseTokenURI = newBaseURI;\r\n    }\r\n    \r\n    // Pause minting\r\n    function pauseMinting() external onlyOwner {\r\n        mintingPaused = true;\r\n    }\r\n    \r\n    // Unpause minting\r\n    function unpauseMinting() external onlyOwner {\r\n        mintingPaused = false;\r\n    }\r\n    \r\n    // Withdraw funds\r\n    function withdraw() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n        \r\n        (bool success, ) = payable(owner).call{value: balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    \r\n    // Internal functions\r\n    function _exists(uint256 tokenId) internal view returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n    \r\n    function _mint(address to, uint256 tokenId) internal {\r\n        require(to != address(0), \"Mint to zero address\");\r\n        require(!_exists(tokenId), \"Token already minted\");\r\n        \r\n        _balances[to]++;\r\n        _owners[tokenId] = to;\r\n        \r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n    \r\n    function _generateAttributes(uint256 tokenId) private pure returns (string[] memory) {\r\n        string[] memory attributes = new string[](4);\r\n        \r\n        // Generate attributes based on tokenId\r\n        attributes[0] = string(abi.encodePacked(\"Rarity: \", _getRarity(tokenId)));\r\n        attributes[1] = string(abi.encodePacked(\"Power: \", _getPower(tokenId)));\r\n        attributes[2] = string(abi.encodePacked(\"Element: \", _getElement(tokenId)));\r\n        attributes[3] = string(abi.encodePacked(\"Generation: \", _getGeneration(tokenId)));\r\n        \r\n        return attributes;\r\n    }\r\n    \r\n    function _getRarity(uint256 tokenId) private pure returns (string memory) {\r\n        uint256 rarity = tokenId % 5;\r\n        if (rarity == 0) return \"Common\";\r\n        if (rarity == 1) return \"Uncommon\";\r\n        if (rarity == 2) return \"Rare\";\r\n        if (rarity == 3) return \"Epic\";\r\n        return \"Legendary\";\r\n    }\r\n    \r\n    function _getPower(uint256 tokenId) private pure returns (string memory) {\r\n        uint256 power = (tokenId % 100) + 1;\r\n        return _toString(power);\r\n    }\r\n    \r\n    function _getElement(uint256 tokenId) private pure returns (string memory) {\r\n        uint256 element = tokenId % 4;\r\n        if (element == 0) return \"Fire\";\r\n        if (element == 1) return \"Water\";\r\n        if (element == 2) return \"Earth\";\r\n        return \"Air\";\r\n    }\r\n    \r\n    function _getGeneration(uint256 tokenId) private pure returns (string memory) {\r\n        uint256 generation = (tokenId / 1000) + 1;\r\n        return _toString(generation);\r\n    }\r\n    \r\n    function _toString(uint256 value) private pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n    \r\n    // Receive function\r\n    receive() external payable {}\r\n}"
      },
      "project/contracts/CryptoIslandToken.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.23;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * @title Crypto Island Token (CIT)\r\n * @dev ERC-20 token for Crypto Island Adventure game\r\n */\r\ncontract CryptoIslandToken is ERC20, Ownable, Pausable, ReentrancyGuard {\r\n    uint256 public constant INITIAL_SUPPLY = 1_000_000 * 10**18;\r\n    uint256 public constant MAX_SUPPLY = 10_000_000 * 10**18;\r\n    uint256 public constant MINT_PRICE = 0.001 ether;\r\n\r\n    struct StakerInfo {\r\n        uint256 stakedAmount;\r\n        uint256 stakingTimestamp;\r\n        bool isStaking;\r\n    }\r\n\r\n    mapping(address => StakerInfo) public stakers;\r\n    uint256 public totalStaked;\r\n    uint256 public constant REWARD_RATE = 10; // 10% APY\r\n    uint256 public constant REWARD_INTERVAL = 365 days;\r\n\r\n    mapping(address => bool) public gameContracts;\r\n    mapping(address => uint256) public gameRewards;\r\n\r\n    event TokensMinted(address indexed to, uint256 amount, uint256 timestamp);\r\n    event TokensStaked(address indexed staker, uint256 amount, uint256 timestamp);\r\n    event TokensUnstaked(address indexed staker, uint256 amount, uint256 timestamp);\r\n    event RewardsClaimed(address indexed staker, uint256 amount, uint256 timestamp);\r\n    event GameRewardEarned(address indexed player, uint256 amount, string gameAction);\r\n\r\n    modifier onlyGameContract() {\r\n        require(gameContracts[msg.sender], \"Only game contracts\");\r\n        _;\r\n    }\r\n\r\n    modifier validMint(uint256 amount) {\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        require(totalSupply() + amount <= MAX_SUPPLY, \"Max supply exceeded\");\r\n        _;\r\n    }\r\n\r\n    constructor() ERC20(\"Crypto Island Token\", \"CIT\") Ownable(msg.sender) {}\r\n\r\n    function initializeSupply(address to) external onlyOwner {\r\n        require(totalSupply() == 0, \"Already initialized\");\r\n        _mint(to, INITIAL_SUPPLY);\r\n    }\r\n\r\n    function mintTokens(address to, uint256 amount) external onlyOwner validMint(amount) {\r\n        _mint(to, amount);\r\n        emit TokensMinted(to, amount, block.timestamp);\r\n    }\r\n\r\n    function mintWithAVAX(uint256 amount) external payable whenNotPaused validMint(amount) {\r\n        require(msg.value >= amount * MINT_PRICE, \"Insufficient AVAX\");\r\n        _mint(msg.sender, amount);\r\n        emit TokensMinted(msg.sender, amount, block.timestamp);\r\n        uint256 expected = amount * MINT_PRICE;\r\n        if (msg.value > expected) {\r\n            (bool ok, ) = payable(msg.sender).call{value: msg.value - expected}(\"\");\r\n            require(ok, \"Refund failed\");\r\n        }\r\n    }\r\n\r\n    function stakeTokens(uint256 amount) external whenNotPaused nonReentrant {\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        require(balanceOf(msg.sender) >= amount, \"Insufficient balance\");\r\n        if (stakers[msg.sender].isStaking) {\r\n            _claimRewardsInternal(msg.sender);\r\n        }\r\n        _transfer(msg.sender, address(this), amount);\r\n        stakers[msg.sender].stakedAmount += amount;\r\n        stakers[msg.sender].stakingTimestamp = block.timestamp;\r\n        stakers[msg.sender].isStaking = true;\r\n        totalStaked += amount;\r\n        emit TokensStaked(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    function unstakeTokens() external whenNotPaused nonReentrant {\r\n        require(stakers[msg.sender].isStaking, \"Not staking\");\r\n        uint256 stakedAmount = stakers[msg.sender].stakedAmount;\r\n        require(stakedAmount > 0, \"No tokens staked\");\r\n        _claimRewardsInternal(msg.sender);\r\n        stakers[msg.sender].stakedAmount = 0;\r\n        stakers[msg.sender].stakingTimestamp = 0;\r\n        stakers[msg.sender].isStaking = false;\r\n        totalStaked -= stakedAmount;\r\n        _transfer(address(this), msg.sender, stakedAmount);\r\n        emit TokensUnstaked(msg.sender, stakedAmount, block.timestamp);\r\n    }\r\n\r\n    function claimRewards() external whenNotPaused nonReentrant {\r\n        require(stakers[msg.sender].isStaking, \"Not staking\");\r\n        _claimRewardsInternal(msg.sender);\r\n    }\r\n\r\n    function _claimRewardsInternal(address stakerAddr) internal {\r\n        uint256 rewards = calculateRewards(stakerAddr);\r\n        require(rewards > 0, \"No rewards\");\r\n        stakers[stakerAddr].stakingTimestamp = block.timestamp;\r\n        _mint(stakerAddr, rewards);\r\n        emit RewardsClaimed(stakerAddr, rewards, block.timestamp);\r\n    }\r\n\r\n    function calculateRewards(address stakerAddr) public view returns (uint256) {\r\n        StakerInfo memory info = stakers[stakerAddr];\r\n        if (!info.isStaking || info.stakedAmount == 0) return 0;\r\n        uint256 duration = block.timestamp - info.stakingTimestamp;\r\n        return (info.stakedAmount * REWARD_RATE * duration) / (100 * REWARD_INTERVAL);\r\n    }\r\n\r\n    function earnGameReward(address player, uint256 amount, string memory gameAction) external onlyGameContract {\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        require(totalSupply() + amount <= MAX_SUPPLY, \"Max supply exceeded\");\r\n        _mint(player, amount);\r\n        gameRewards[player] += amount;\r\n        emit GameRewardEarned(player, amount, gameAction);\r\n    }\r\n\r\n    function spendGameTokens(address player, uint256 amount) external onlyGameContract {\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        _transfer(player, address(this), amount);\r\n    }\r\n\r\n    function addGameContract(address gameContract) external onlyOwner {\r\n        gameContracts[gameContract] = true;\r\n    }\r\n\r\n    function removeGameContract(address gameContract) external onlyOwner {\r\n        gameContracts[gameContract] = false;\r\n    }\r\n\r\n    function pause() external onlyOwner { _pause(); }\r\n    function unpause() external onlyOwner { _unpause(); }\r\n\r\n    function withdrawAVAX() external onlyOwner {\r\n        uint256 bal = address(this).balance;\r\n        require(bal > 0, \"No AVAX\");\r\n        (bool ok, ) = payable(owner()).call{value: bal}(\"\");\r\n        require(ok, \"Withdraw failed\");\r\n    }\r\n}\r\n\r\n\r\n"
      }
    }
  }
}